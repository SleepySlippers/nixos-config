# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ ];

  boot.initrd.availableKernelModules = [ "ata_piix" "ohci_pci" "ehci_pci" "ahci" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-partlabel/root";
      fsType = "ext4";
    };

  let
    # Import the pathExists function from pkgs
    pathExists = pkgs.lib.fileExists;
    efiDevice = "/dev/disk/by-partlabel/EFI";
    fallbackDevice = "/dev/disk/by-partlabel/ESP";
  in
  {
    fileSystems."/boot" = {
      device = if pathExists efiDevice then efiDevice else fallbackDevice;
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };
  }

  swapDevices =
    [ { device = "/dev/disk/by-uuid/bda11584-13a1-4562-bed9-09841f489837"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  virtualisation.virtualbox.guest.enable = true;
}
